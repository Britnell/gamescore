{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["TextInput","onsubmit","onchange","props","type","onChange","onKeyPress","ev","key","randomHue","h","s","l","c","Math","abs","x","m","r","g","b","round","toString","length","HSLToHEX","random","Header","className","to","NewPlayer","onNewPlayer","name","target","value","ScoreButton","val","buttonScoreChange","sign","onClick","Player","player","setScore","removePlayer","score","hue","operation","mod","style","backgroundColor","newScore","parseInt","width","GameCounter","React","useState","local","window","localStorage","getItem","JSON","parse","players","setPlayers","onRemovePlayer","_players","hasOwnProperty","sc","useEffect","setItem","stringify","playerlist","Object","keys","map","i","push","RoundsCounter","App","exact","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ab3624d2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// a single line text-input with enter to submit\n// passes props and takes submit funciton\nfunction TextInput({ onsubmit=()=>{}, onchange=()=>{}, props={} }){\n  function keypress(ev){\n    if(ev.key==='Enter')\n      onsubmit(ev)\n  }\n  return (<input type=\"text\" onChange={onchange} onKeyPress={keypress} {...props} />)\n}\n\n\n// \nfunction HSLToHEX(h,s,l) {\n  // Must be fractions of 1\n  s /= 100;\n  l /= 100;\n\n  let c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs((h / 60) % 2 - 1)),\n      m = l - c/2,\n      r = 0,\n      g = 0,\n      b = 0;\n  \n    if (0 <= h && h < 60) {\n      r = c; g = x; b = 0;  \n    } else if (60 <= h && h < 120) {\n      r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n      r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n      r = c; g = 0; b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    \n    r = r.toString(16);\n    g = g.toString(16);\n    b = b.toString(16);\n\n    if (r.length == 1)\n      r = \"0\" + r;\n    if (g.length == 1)\n      g = \"0\" + g;\n    if (b.length == 1)\n      b = \"0\" + b;\n\n    return \"#\" + r + g + b;\n}\n\n\nfunction randomHue(){\n  let h = Math.random()*360\n  let s = 88\n  let l = 75\n  return HSLToHEX(h,s,l);\n}\n\n\nfunction Header(){\n\n  return (<div className='header-row'>\n    Player Scores\n    <div className=\"nav-link\"><Link to=\"/\">Basic</Link></div>\n            <div className=\"nav-link\"><Link to=\"/rounds\">Rounds</Link></div>\n  </div>)\n}\n\n\nfunction NewPlayer({onNewPlayer}){\n\n  function ipsubmit(ev){\n    let name = ev.target.value\n    ev.target.value = ''\n    onNewPlayer(name)\n  } \n\n  return (<div className='new-row'>\n            <div>Add player : </div>\n            <TextInput props={{name:'nameinput'}} onsubmit={ipsubmit}  />\n          </div>)\n}\n\n\nfunction ScoreButton({val,buttonScoreChange}){\n\n  let sign = (val>0)?'+':'-'\n  function scoreChange(ev){\n    buttonScoreChange(x=>x+val)\n  }\n  return (<div className=\"add-button\" onClick={scoreChange} >{sign}{val}</div>)\n}\n\nfunction Player({player,setScore,removePlayer}){\n  const {name,score,hue} = player;\n\n  function ipScoreChange(ev){\n    let newScore = parseInt(ev.target.value)\n    if(newScore || newScore===0 )\n      setScore(name,newScore)\n    else\n      setScore(name,ev.target.value)\n    \n    \n  }\n\n  function buttonScoreChange(operation){\n    let mod = operation(score)\n    setScore(name,mod)\n  }\n\n\n  return(<div className=\"player-row\" style={{backgroundColor: hue }} >\n    <div>{name}</div>\n    {/* <div>{score}</div> */}\n    <TextInput onchange={ipScoreChange} props={{ style:{width: `90%`}, value: score}} />\n    <div className=\"add-button-container\">\n      <ScoreButton val={1} buttonScoreChange={buttonScoreChange}  />\n      <ScoreButton val={5} buttonScoreChange={buttonScoreChange}  />\n      <ScoreButton val={10} buttonScoreChange={buttonScoreChange}  />\n    </div>\n    <div className=\"remove-button\" onClick={()=>removePlayer(name)}>X</div>\n  </div>)\n}\n\n\n\nfunction GameCounter(){\n  const [players,setPlayers] = React.useState(()=>{\n    let local = window.localStorage.getItem('player-score')\n    if(!local)  return {};\n    return JSON.parse(local)\n  })\n  \n  React.useEffect(()=>{\n    window.localStorage.setItem('player-score',JSON.stringify(players))\n  },[players])\n\n  function onNewPlayer(name){\n    let _players = {...players}\n    _players[name] = {\n                        name: name,\n                        score: 0,\n                        hue: randomHue(),\n                      }\n    setPlayers(_players)\n  }\n\n  function onRemovePlayer(name){\n    let _players = {...players}\n    if(_players.hasOwnProperty(name))\n      delete _players[name]\n    setPlayers(_players)\n  }\n\n  function setScore(name,sc){\n    let _players = {...players}\n    _players[name]['score'] = sc;\n    setPlayers(_players)\n  }\n\n  const playerlist = []\n\n  Object.keys(players).map( (name,i) => \n      playerlist.push(<Player \n        key={i} \n        player={players[name]}\n        setScore={setScore}\n        removePlayer={onRemovePlayer} \n      />)  )\n\n  return (<>\n            {playerlist}\n            <NewPlayer onNewPlayer={onNewPlayer} />\n          </>)\n}\n\nfunction RoundsCounter(){\n  return (<div>ROUNDS</div>)\n}\nfunction App() {\n  return (\n    <>\n      <Router>\n          <div className=\"counter-container\">\n            <Header />\n            <Switch>\n              <Route exact path=\"/\">\n                <GameCounter />\n              </Route>\n              <Route>\n                <RoundsCounter />\n              </Route>\n            </Switch>\n          </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}